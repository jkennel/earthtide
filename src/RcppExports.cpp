// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// time_mat
arma::mat time_mat(const arma::rowvec time);
RcppExport SEXP _earthtide_time_mat(SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(time_mat(time));
    return rcpp_result_gen;
END_RCPP
}
// time_der_mat
arma::mat time_der_mat(const arma::rowvec time);
RcppExport SEXP _earthtide_time_der_mat(SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(time_der_mat(time));
    return rcpp_result_gen;
END_RCPP
}
// astro
arma::mat astro(const arma::rowvec t_astro, const arma::mat simon, double longitude, const arma::rowvec hours, const arma::rowvec ddt);
RcppExport SEXP _earthtide_astro(SEXP t_astroSEXP, SEXP simonSEXP, SEXP longitudeSEXP, SEXP hoursSEXP, SEXP ddtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type t_astro(t_astroSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type simon(simonSEXP);
    Rcpp::traits::input_parameter< double >::type longitude(longitudeSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type hours(hoursSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type ddt(ddtSEXP);
    rcpp_result_gen = Rcpp::wrap(astro(t_astro, simon, longitude, hours, ddt));
    return rcpp_result_gen;
END_RCPP
}
// astro_der
arma::mat astro_der(const arma::rowvec t_astro, const arma::mat simon);
RcppExport SEXP _earthtide_astro_der(SEXP t_astroSEXP, SEXP simonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type t_astro(t_astroSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type simon(simonSEXP);
    rcpp_result_gen = Rcpp::wrap(astro_der(t_astro, simon));
    return rcpp_result_gen;
END_RCPP
}
// legendre_bh
double legendre_bh(int l, int m, double x, int csphase);
RcppExport SEXP _earthtide_legendre_bh(SEXP lSEXP, SEXP mSEXP, SEXP xSEXP, SEXP csphaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type csphase(csphaseSEXP);
    rcpp_result_gen = Rcpp::wrap(legendre_bh(l, m, x, csphase));
    return rcpp_result_gen;
END_RCPP
}
// legendre_deriv_bh
double legendre_deriv_bh(int l, int m, double x);
RcppExport SEXP _earthtide_legendre_deriv_bh(SEXP lSEXP, SEXP mSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(legendre_deriv_bh(l, m, x));
    return rcpp_result_gen;
END_RCPP
}
// scale_legendre_bh
double scale_legendre_bh(int l, int m);
RcppExport SEXP _earthtide_scale_legendre_bh(SEXP lSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_legendre_bh(l, m));
    return rcpp_result_gen;
END_RCPP
}
// legendre
Rcpp::NumericMatrix legendre(int l_max, double x);
RcppExport SEXP _earthtide_legendre(SEXP l_maxSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l_max(l_maxSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(legendre(l_max, x));
    return rcpp_result_gen;
END_RCPP
}
// et_analyze
arma::mat et_analyze(const arma::mat astro, const arma::mat astro_der, const arma::mat k_mat, const arma::vec pk, const arma::vec body, const arma::uvec body_inds, double delta, double deltar, const arma::vec x0, const arma::vec y0, const arma::vec x1, const arma::vec y1, const arma::vec x2, const arma::vec y2, const arma::vec j2000, double o1, double resonance, const arma::uword max_amp, double update_coef, bool scale);
RcppExport SEXP _earthtide_et_analyze(SEXP astroSEXP, SEXP astro_derSEXP, SEXP k_matSEXP, SEXP pkSEXP, SEXP bodySEXP, SEXP body_indsSEXP, SEXP deltaSEXP, SEXP deltarSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP x1SEXP, SEXP y1SEXP, SEXP x2SEXP, SEXP y2SEXP, SEXP j2000SEXP, SEXP o1SEXP, SEXP resonanceSEXP, SEXP max_ampSEXP, SEXP update_coefSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type astro(astroSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type astro_der(astro_derSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type k_mat(k_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type body(bodySEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type body_inds(body_indsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type deltar(deltarSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type j2000(j2000SEXP);
    Rcpp::traits::input_parameter< double >::type o1(o1SEXP);
    Rcpp::traits::input_parameter< double >::type resonance(resonanceSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type max_amp(max_ampSEXP);
    Rcpp::traits::input_parameter< double >::type update_coef(update_coefSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(et_analyze(astro, astro_der, k_mat, pk, body, body_inds, delta, deltar, x0, y0, x1, y1, x2, y2, j2000, o1, resonance, max_amp, update_coef, scale));
    return rcpp_result_gen;
END_RCPP
}
// et_predict
arma::mat et_predict(const arma::mat astro, const arma::mat astro_der, const arma::mat k_mat, const arma::vec pk, const arma::vec body, const arma::uvec body_inds, double delta, double deltar, const arma::vec x0, const arma::vec y0, const arma::vec x1, const arma::vec y1, const arma::vec x2, const arma::vec y2, const arma::vec j2000, double o1, double resonance, const arma::uword max_amp, double update_coef);
RcppExport SEXP _earthtide_et_predict(SEXP astroSEXP, SEXP astro_derSEXP, SEXP k_matSEXP, SEXP pkSEXP, SEXP bodySEXP, SEXP body_indsSEXP, SEXP deltaSEXP, SEXP deltarSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP x1SEXP, SEXP y1SEXP, SEXP x2SEXP, SEXP y2SEXP, SEXP j2000SEXP, SEXP o1SEXP, SEXP resonanceSEXP, SEXP max_ampSEXP, SEXP update_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type astro(astroSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type astro_der(astro_derSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type k_mat(k_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type body(bodySEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type body_inds(body_indsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type deltar(deltarSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type j2000(j2000SEXP);
    Rcpp::traits::input_parameter< double >::type o1(o1SEXP);
    Rcpp::traits::input_parameter< double >::type resonance(resonanceSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type max_amp(max_ampSEXP);
    Rcpp::traits::input_parameter< double >::type update_coef(update_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(et_predict(astro, astro_der, k_mat, pk, body, body_inds, delta, deltar, x0, y0, x1, y1, x2, y2, j2000, o1, resonance, max_amp, update_coef));
    return rcpp_result_gen;
END_RCPP
}
// et_calculate
arma::mat et_calculate(const arma::mat astro, const arma::mat astro_der, const arma::mat k_mat, const arma::vec phases, const arma::vec delta, double deltar, const arma::vec c0, const arma::vec s0, const arma::vec c1, const arma::vec s1, const arma::vec c2, const arma::vec s2, const arma::vec dgk, const arma::uvec jcof, const arma::vec j2000, double o1, double resonance, const arma::ivec index, int astro_update, double update_coef, const arma::vec magnifier, bool predict, bool scale);
RcppExport SEXP _earthtide_et_calculate(SEXP astroSEXP, SEXP astro_derSEXP, SEXP k_matSEXP, SEXP phasesSEXP, SEXP deltaSEXP, SEXP deltarSEXP, SEXP c0SEXP, SEXP s0SEXP, SEXP c1SEXP, SEXP s1SEXP, SEXP c2SEXP, SEXP s2SEXP, SEXP dgkSEXP, SEXP jcofSEXP, SEXP j2000SEXP, SEXP o1SEXP, SEXP resonanceSEXP, SEXP indexSEXP, SEXP astro_updateSEXP, SEXP update_coefSEXP, SEXP magnifierSEXP, SEXP predictSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type astro(astroSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type astro_der(astro_derSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type k_mat(k_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type phases(phasesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type deltar(deltarSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type dgk(dgkSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type jcof(jcofSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type j2000(j2000SEXP);
    Rcpp::traits::input_parameter< double >::type o1(o1SEXP);
    Rcpp::traits::input_parameter< double >::type resonance(resonanceSEXP);
    Rcpp::traits::input_parameter< const arma::ivec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type astro_update(astro_updateSEXP);
    Rcpp::traits::input_parameter< double >::type update_coef(update_coefSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type magnifier(magnifierSEXP);
    Rcpp::traits::input_parameter< bool >::type predict(predictSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(et_calculate(astro, astro_der, k_mat, phases, delta, deltar, c0, s0, c1, s1, c2, s2, dgk, jcof, j2000, o1, resonance, index, astro_update, update_coef, magnifier, predict, scale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_earthtide_time_mat", (DL_FUNC) &_earthtide_time_mat, 1},
    {"_earthtide_time_der_mat", (DL_FUNC) &_earthtide_time_der_mat, 1},
    {"_earthtide_astro", (DL_FUNC) &_earthtide_astro, 5},
    {"_earthtide_astro_der", (DL_FUNC) &_earthtide_astro_der, 2},
    {"_earthtide_legendre_bh", (DL_FUNC) &_earthtide_legendre_bh, 4},
    {"_earthtide_legendre_deriv_bh", (DL_FUNC) &_earthtide_legendre_deriv_bh, 3},
    {"_earthtide_scale_legendre_bh", (DL_FUNC) &_earthtide_scale_legendre_bh, 2},
    {"_earthtide_legendre", (DL_FUNC) &_earthtide_legendre, 2},
    {"_earthtide_et_analyze", (DL_FUNC) &_earthtide_et_analyze, 20},
    {"_earthtide_et_predict", (DL_FUNC) &_earthtide_et_predict, 19},
    {"_earthtide_et_calculate", (DL_FUNC) &_earthtide_et_calculate, 23},
    {NULL, NULL, 0}
};

RcppExport void R_init_earthtide(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
